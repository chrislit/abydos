# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:

- job: 'Test'

  strategy:
    matrix:
      Python36Linux:
        python.version: '3.6'
        imageName: 'ubuntu-latest'
        architecture: 'x64'
      Python37Linux:
        python.version: '3.7'
        imageName: 'ubuntu-latest'
        architecture: 'x64'
      Python38Linux:
        python.version: '3.8'
        imageName: 'ubuntu-latest'
        architecture: 'x64'
      Python36Windows:
        python.version: '3.6'
        imageName: 'windows-latest'
        architecture: 'x64'
      Python37Windows:
        python.version: '3.7'
        imageName: 'windows-latest'
        architecture: 'x64'
      Python38Windows:
        python.version: '3.8'
        imageName: 'windows-latest'
        architecture: 'x64'
      Python36Windowsx86:
        python.version: '3.6'
        imageName: 'windows-latest'
        architecture: 'x86'
      Python37Windowsx86:
        python.version: '3.7'
        imageName: 'windows-latest'
        architecture: 'x86'
      Python38Windowsx86:
        python.version: '3.8'
        imageName: 'windows-latest'
        architecture: 'x86'
      Python36MacOS:
        python.version: '3.6'
        imageName: 'macOS-latest'
        architecture: 'x64'
      Python37MacOS:
        python.version: '3.7'
        imageName: 'macOS-latest'
        architecture: 'x64'
      Python38MacOS:
        python.version: '3.8'
        imageName: 'macOS-latest'
        architecture: 'x64'
    maxParallel: 10

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(architecture)'

  - script: python -m pip install --upgrade pip && pip install cython && pip install cython -r requirements.txt nltk syllabipy
    displayName: 'Install dependencies'

  - script: |
      pip install pytest
      pip install pytest-cov
      pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=abydos --cov-report=xml --cov-report=html
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
